From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: CodeTheDev <code@codeslab.ca>
Date: Mon, 10 Oct 2022 16:38:34 -0400
Subject: [PATCH] Obamium TPSBar features

A modified version of Purpur's TPSBar feature.

diff --git a/src/main/java/dev/codeerror/obamium/ObamiumConfig.java b/src/main/java/dev/codeerror/obamium/ObamiumConfig.java
index b625877cab9998813e478fc599551e8ec8b483ff..8356084f08494359d909707054af1b3670eacf49 100644
--- a/src/main/java/dev/codeerror/obamium/ObamiumConfig.java
+++ b/src/main/java/dev/codeerror/obamium/ObamiumConfig.java
@@ -1,5 +1,8 @@
 package dev.codeerror.obamium;
 
+import static dev.codeerror.obamium.command.TPSBarCommand.TPSBarTask;
+import net.kyori.adventure.bossbar.BossBar;
+import org.jetbrains.annotations.Nullable;
 import org.simpleyaml.configuration.comments.CommentType;
 import org.simpleyaml.configuration.file.YamlFile;
 
@@ -12,6 +15,17 @@ public class ObamiumConfig {
 
     public static boolean offlineWarning;
 
+    public static String tpsBarTitle;
+    public static BossBar.Overlay tpsBarOverlay;
+    public static TPSBarTask.FillMode tpsBarMode;
+    public static BossBar.Color tpsBarColourGood;
+    public static BossBar.Color tpsBarColourMed;
+    public static BossBar.Color tpsBarColourLow;
+    public static String tpsBarTextColourGood;
+    public static String tpsBarTextColourMed;
+    public static String tpsBarTextColourLow;
+    public static int tpsBarTickInterval;
+
     public static void loadConfig() throws IOException {
         File configFile = new File("obamium.yml");
         config.options().useComments(true); // Keep comments when loading config.
@@ -38,6 +52,58 @@ public class ObamiumConfig {
                 "Defaults to true."
         );
 
+        tpsBarTitle = getString("tpsbar.title", "<gray>TPS<yellow>:</yellow> <tps> MSPT<yellow>:</yellow> <mspt> Ping<yellow>:</yellow> <ping>ms",
+                "Title of TPSBar."
+        );
+        tpsBarOverlay = BossBar.Overlay.valueOf(
+                getString("tpsbar.overlay", "NOTCHED_20",
+                        "Overlay type of TPSBar.",
+                        "Options: PROGRESS, NOTCHED_6, NOTCHED_10, NOTCHED_12, NOTCHED_20",
+                        "Defaults to NOTCHED_20."
+                )
+        );
+        tpsBarMode = TPSBarTask.FillMode.valueOf(
+                getString("tpsbar.mode", "MSPT",
+                        "Display mode of TPSBar.",
+                        "Options: TPS, MSPT, PING",
+                        "Defaults to MSPT."
+                )
+        );
+        setComment("tpsbar.colour.bar",
+                "Colour of TPSBar.",
+                "Options: PINK, BLUE, RED, GREEN, YELLOW, PURPLE, WHITE"
+        );
+        tpsBarColourGood = BossBar.Color.valueOf(
+                getString("tpsbar.colour.bar.good", "GREEN",
+                        "Colour displayed when TPS/MSPT/Ping is good."
+                )
+        );
+        tpsBarColourMed = BossBar.Color.valueOf(
+                getString("tpsbar.colour.bar.medium", "YELLOW",
+                        "Colour displayed when TPS/MSPT/Ping is medium."
+                )
+        );
+        tpsBarColourLow = BossBar.Color.valueOf(
+                getString("tpsbar.colour.bar.low", "RED",
+                        "Colour displayed when TPS/MSPT/Ping is bad."
+                )
+        );
+        setComment("tpsbar.colour.text",
+                "Colour of TPSBar text."
+        );
+        tpsBarTextColourGood = getString("tpsbar.colour.text.good","<gradient:#55ff55:#00aa00><text></gradient>",
+                "Text colour displayed when TPS/MSPT/Ping is good."
+        );
+        tpsBarTextColourMed = getString("tpsbar.colour.text.medium", "<gradient:#ffff55:#ffaa00><text></gradient>",
+                "Text colour displayed when TPS/MSPT/Ping is medium."
+        );
+        tpsBarTextColourLow = getString("tpsbar.colour.text.low", "<gradient:#ff5555:#aa0000><text></gradient>",
+                "Text colour displayed when TPS/MSPT/Ping is bad."
+        );
+        tpsBarTickInterval = getInt("tpsbar.tick-interval", 20,
+                "Tick interval of TPSBar."
+        );
+
         config.save(configFile);
 
     }
@@ -67,14 +133,20 @@ public class ObamiumConfig {
         return config.getString(key, defaultValue);
     }
 
+    private static void setComment(String key, String... comment) {
+        if (config.getComment(key) == null) config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+    }
+
     private static void setHeader(String... header) {
         if (config.getHeader() == null) config.setHeader(String.join("\n", header));
     }
 
-    private static void createEntry(String key, Object defaultValue, String... comment) {
+    private static void createEntry(String key, Object defaultValue, @Nullable String... comment) {
         if (!config.contains(key)) {
             config.set(key, defaultValue);
-            config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+            if (comment != null) {
+                config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+            }
         }
     }
 
diff --git a/src/main/java/dev/codeerror/obamium/ObamiumCommand.java b/src/main/java/dev/codeerror/obamium/command/ObamiumCommand.java
similarity index 97%
rename from src/main/java/dev/codeerror/obamium/ObamiumCommand.java
rename to src/main/java/dev/codeerror/obamium/command/ObamiumCommand.java
index 1ea7a7b90464bcfc865ccfd9644b8389e30483d4..b92a61eb6bb9a8c5cf979a9476eef12f2849d4f0 100644
--- a/src/main/java/dev/codeerror/obamium/ObamiumCommand.java
+++ b/src/main/java/dev/codeerror/obamium/command/ObamiumCommand.java
@@ -1,6 +1,7 @@
-package dev.codeerror.obamium;
+package dev.codeerror.obamium.command;
 
 import com.google.common.base.Joiner;
+import dev.codeerror.obamium.ObamiumConfig;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.minimessage.MiniMessage;
diff --git a/src/main/java/dev/codeerror/obamium/command/TPSBarCommand.java b/src/main/java/dev/codeerror/obamium/command/TPSBarCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..f86fb6d1196be9dae25838b2cb069a467683905f
--- /dev/null
+++ b/src/main/java/dev/codeerror/obamium/command/TPSBarCommand.java
@@ -0,0 +1,246 @@
+package dev.codeerror.obamium.command;
+
+import com.mojang.brigadier.CommandDispatcher;
+import dev.codeerror.obamium.ObamiumConfig;
+import io.papermc.paper.adventure.PaperAdventure;
+import net.kyori.adventure.bossbar.BossBar;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
+import org.bukkit.entity.Player;
+import org.bukkit.scheduler.BukkitRunnable;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.*;
+
+public class TPSBarCommand {
+
+    public static void register(@NotNull CommandDispatcher<CommandSourceStack> dispatcher) {
+        dispatcher.register(Commands.literal("tpsbar")
+                .requires(listener -> listener.hasPermission(2, "bukkit.command.obamium.tpsbar") || listener.hasPermission(2, "bukkit.command.obamium"))
+                .executes(context -> execute(context.getSource(), Collections.singleton(context.getSource().getPlayerOrException())))
+                .then(Commands.argument("targets", EntityArgument.players()).executes((context) -> execute(context.getSource(), EntityArgument.getPlayers(context, "targets"))))
+        );
+    }
+
+    private static int execute(CommandSourceStack sender, @NotNull Collection<ServerPlayer> targets) {
+        Component chatPrefix = MiniMessage.miniMessage().deserialize("<blue><bold>Obamium</bold></blue> <aqua>\u27a4</aqua> ");
+        for (ServerPlayer target : targets) {
+            boolean tpsBar = TPSBarTask.getInstance().togglePlayer(target.getBukkitEntity());
+            target.setTPSBar(tpsBar);
+            sender.sendSuccess(PaperAdventure.asVanilla(chatPrefix.append(MiniMessage.miniMessage().deserialize(
+                    "<gray>TPSBar toggled</gray> <toggle> <gray>for</gray> <yellow><target></yellow><gray>.</gray>",
+                    Placeholder.component("toggle", Component.translatable(tpsBar ? "options.on" : "options.off").color(tpsBar ? NamedTextColor.GREEN : NamedTextColor.RED)),
+                    Placeholder.parsed("target", target.getGameProfile().getName())
+            ))), false);
+        }
+        return targets.size();
+    }
+
+    public static class TPSBarTask extends BukkitRunnable {
+
+        public enum FillMode {
+            TPS,
+            MSPT,
+            PING
+        }
+
+        private static TPSBarTask instance;
+
+        private final Map<UUID, BossBar> tpsBars = new HashMap<>();
+        private boolean started;
+
+        private double tps = 20.0d;
+        private double mspt = 0.0d;
+        private int tick = 0;
+
+        public static TPSBarTask getInstance() {
+            if (instance == null) instance = new TPSBarTask();
+            return instance;
+        }
+
+        public BossBar createTPSBar() {
+            return BossBar.bossBar(Component.text(""), 0.0f, getInstance().getTPSBarColour(), ObamiumConfig.tpsBarOverlay);
+        }
+
+        public void updateTPSBar(@NotNull BossBar tpsBar, @NotNull Player target) {
+            tpsBar.progress(getTPSBarProgress());
+            tpsBar.color(getTPSBarColour());
+            tpsBar.name(
+                    MiniMessage.miniMessage().deserialize(
+                            ObamiumConfig.tpsBarTitle,
+                            Placeholder.component("tps", getTPSColour()),
+                            Placeholder.component("mspt", getMSPTColour()),
+                            Placeholder.component("ping", getPingColour(target.getPing()))
+                    )
+            );
+        }
+
+        @Override
+        public void run() {
+            if (++tick < ObamiumConfig.tpsBarTickInterval) return;
+
+            tick = 0;
+            tps = Math.max(Math.min(Bukkit.getTPS()[0], 20.0d), 0.0d);
+            mspt = Bukkit.getAverageTickTime();
+
+            Iterator<Map.Entry<UUID, BossBar>> iterator = tpsBars.entrySet().iterator();
+            while (iterator.hasNext()) {
+                Map.Entry<UUID, BossBar> tpsBar = iterator.next();
+                Player target = Bukkit.getPlayer(tpsBar.getKey());
+                if (target == null) {
+                    iterator.remove();
+                    continue;
+                }
+                updateTPSBar(tpsBar.getValue(), target);
+            }
+        }
+
+        @Override
+        public synchronized void cancel() throws IllegalStateException {
+            super.cancel();
+            new HashSet<>(tpsBars.keySet()).forEach(uuid -> {
+                Player target = Bukkit.getPlayer(uuid);
+                if (target != null) removePlayer(target);
+            });
+            tpsBars.clear();
+        }
+
+        public void start() {
+            stop();
+            runTaskTimerAsynchronously(new MinecraftInternalPlugin(), 1, 1);
+            started = true;
+        }
+
+        public void stop() {
+            if (started) cancel();
+        }
+
+        public static void startAll() {
+            getInstance().start();
+        }
+
+        public static void stopAll() {
+            getInstance().stop();
+        }
+
+        public void addPlayer(Player target) {
+            removePlayer(target);
+            BossBar tpsBar = createTPSBar();
+            tpsBars.put(target.getUniqueId(), tpsBar);
+            updateTPSBar(tpsBar, target);
+            target.showBossBar(tpsBar);
+        }
+
+        public static void addToAll(@NotNull ServerPlayer vanillaTarget) {
+            if (vanillaTarget.getTPSBar()) getInstance().removePlayer(vanillaTarget.getBukkitEntity());
+        }
+
+        public boolean removePlayer(@NotNull Player target) {
+            BossBar tpsBar = tpsBars.remove(target.getUniqueId());
+            if (tpsBar != null) {
+                target.hideBossBar(tpsBar);
+                return true;
+            }
+            return false;
+        }
+
+        public static void removeFromAll(Player target) {
+            getInstance().removePlayer(target);
+        }
+
+        public boolean togglePlayer(Player target) {
+            if (removePlayer(target)) return false;
+            addPlayer(target);
+            return true;
+        }
+
+        private float getTPSBarProgress() {
+            if (ObamiumConfig.tpsBarMode == FillMode.MSPT) return Math.max(Math.min((float) mspt / 50.0F, 1.0F), 0.0F);
+            return Math.max(Math.min((float) tps / 20.0F, 1.0F), 0.0F);
+        }
+
+        private BossBar.Color getTPSBarColour() {
+            if (isGood(ObamiumConfig.tpsBarMode)) {
+                return ObamiumConfig.tpsBarColourGood;
+            } else if (isMedium(ObamiumConfig.tpsBarMode)) {
+                return ObamiumConfig.tpsBarColourMed;
+            }
+            return ObamiumConfig.tpsBarColourLow;
+        }
+
+        private @NotNull Component getTPSColour() {
+            if (isGood(FillMode.TPS)) {
+                return MiniMessage.miniMessage().deserialize(ObamiumConfig.tpsBarTextColourGood, Placeholder.parsed("text", String.format("%.2f", tps)));
+            } else if (isMedium(FillMode.TPS)) {
+                return MiniMessage.miniMessage().deserialize(ObamiumConfig.tpsBarTextColourMed, Placeholder.parsed("text", String.format("%.2f", tps)));
+            }
+            return MiniMessage.miniMessage().deserialize(ObamiumConfig.tpsBarTextColourLow, Placeholder.parsed("text", String.format("%.2f", tps)));
+        }
+
+        private @NotNull Component getMSPTColour() {
+            if (isGood(FillMode.MSPT)) {
+                return MiniMessage.miniMessage().deserialize(ObamiumConfig.tpsBarTextColourGood, Placeholder.parsed("text", String.format("%.2f", mspt)));
+            } else if (isMedium(FillMode.MSPT)) {
+                return MiniMessage.miniMessage().deserialize(ObamiumConfig.tpsBarTextColourMed, Placeholder.parsed("text", String.format("%.2f", mspt)));
+            }
+            return MiniMessage.miniMessage().deserialize(ObamiumConfig.tpsBarTextColourLow, Placeholder.parsed("text", String.format("%.2f", mspt)));
+        }
+
+        private @NotNull Component getPingColour(int ping) {
+            if (isGood(FillMode.PING)) {
+                return MiniMessage.miniMessage().deserialize(ObamiumConfig.tpsBarTextColourGood, Placeholder.parsed("text", String.format("%s", ping)));
+            } else if (isMedium(FillMode.PING)) {
+                return MiniMessage.miniMessage().deserialize(ObamiumConfig.tpsBarTextColourMed, Placeholder.parsed("text", String.format("%s", ping)));
+            }
+            return MiniMessage.miniMessage().deserialize(ObamiumConfig.tpsBarTextColourLow, Placeholder.parsed("text", String.format("%s", ping)));
+        }
+
+        private boolean isGood(FillMode mode) {
+            return isGood(mode, 0);
+        }
+
+        private boolean isGood(@NotNull FillMode mode, int ping) {
+            switch (mode) {
+                case MSPT -> {
+                    return mspt < 40;
+                }
+                case TPS -> {
+                    return tps >= 19;
+                }
+                case PING -> {
+                    return ping < 100;
+                }
+            }
+            return false;
+        }
+
+        private boolean isMedium(FillMode mode) {
+            return isMedium(mode, 0);
+        }
+
+        private boolean isMedium(@NotNull FillMode mode, int ping) {
+            switch (mode) {
+                case MSPT -> {
+                    return mspt < 50;
+                }
+                case TPS -> {
+                    return tps >= 15;
+                }
+                case PING -> {
+                    return ping < 200;
+                }
+            }
+            return false;
+        }
+
+    }
+
+}
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 7c96f7fc5997761426a0c62cad0cab5cc668f282..0bed632ec84d646ded1cb3af59383db8ee8fcd15 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -207,6 +207,7 @@ public class Commands {
             SetPlayerIdleTimeoutCommand.register(this.dispatcher);
             StopCommand.register(this.dispatcher);
             WhitelistCommand.register(this.dispatcher);
+            dev.codeerror.obamium.command.TPSBarCommand.register(this.dispatcher); // Obamium
         }
 
         if (environment.includeIntegrated) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index cf9ee035036ef921a11183df88683e686aa8cd69..d10a47f6269f6d5ff8c7687e8927010188251d80 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1021,6 +1021,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.safeShutdown(flag, false);
     }
     public void safeShutdown(boolean flag, boolean isRestarting) {
+        dev.codeerror.obamium.command.TPSBarCommand.TPSBarTask.stopAll(); // Obamium
         this.isRestarting = isRestarting;
         this.hasLoggedStop = true; // Paper
         if (isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index dea78541f711521999c68bba5fa2f28aa4d19754..28b087f4ce72c110ec2b35ba58f889cb0978dedf 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -229,7 +229,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
         gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
         dev.codeerror.obamium.ObamiumConfig.loadConfig(); // Obamium
-        dev.codeerror.obamium.ObamiumCommand.register(); // Obamium
+        dev.codeerror.obamium.command.ObamiumCommand.register(); // Obamium
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
@@ -347,6 +347,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             }
 
             if (gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning) mobSpawnExecutor.start(); // Pufferfish
+            dev.codeerror.obamium.command.TPSBarCommand.TPSBarTask.startAll(); // Obamium
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index af7acb628b84539b1ee5ef1934f75f091c4cd91e..fabafd8cb6a1d3f8663e0b04b14057e4f02afe50 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -261,6 +261,7 @@ public class ServerPlayer extends Player {
     public Integer clientViewDistance;
     // CraftBukkit end
     public PlayerNaturallySpawnCreaturesEvent playerNaturallySpawnedEvent; // Paper
+    private boolean tpsBar = false; // Obamium
 
     public boolean isRealPlayer; // Paper
     public double lastEntitySpawnRadiusSquared; // Paper - optimise isOutsideRange, this field is in blocks
@@ -467,6 +468,7 @@ public class ServerPlayer extends Player {
             }
         }
 
+        if (nbt.contains("Obamium.TPSBar")) this.tpsBar = nbt.getBoolean("Obamium.TPSBar"); // Obamium
     }
 
     @Override
@@ -527,6 +529,7 @@ public class ServerPlayer extends Player {
         }
         this.getBukkitEntity().setExtraData(nbt); // CraftBukkit
 
+        nbt.putBoolean("Obamium.TPSBar", this.tpsBar); // Obamium
     }
 
     // CraftBukkit start - World fallback code, either respawn location or global spawn
@@ -2468,4 +2471,14 @@ public class ServerPlayer extends Player {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+
+    // Obamium start - TPSBar methods.
+    public boolean getTPSBar() {
+        return this.tpsBar;
+    }
+
+    public void setTPSBar(boolean tpsBar) {
+        this.tpsBar = tpsBar;
+    }
+    // Obamium end
 }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 06eda955f96b5fe2d08ed0d39229c7a6ebb88931..030fefa8e75ac77c62e6b538c2aaba98e0d97362 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -503,6 +503,7 @@ public abstract class PlayerList {
             scoreboard.addPlayerToTeam(player.getScoreboardName(), collideRuleTeam);
         }
         // Paper end
+        dev.codeerror.obamium.command.TPSBarCommand.TPSBarTask.addToAll(player); // Obamium
         // CraftBukkit - Moved from above, added world
         PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", player.getName().getString(), s1, player.getId(), worldserver1.serverLevelData.getLevelName(), player.getX(), player.getY(), player.getZ());
     }
@@ -613,6 +614,8 @@ public abstract class PlayerList {
     }
     public net.kyori.adventure.text.Component remove(ServerPlayer entityplayer, net.kyori.adventure.text.Component leaveMessage) {
         // Paper end
+        dev.codeerror.obamium.command.TPSBarCommand.TPSBarTask.removeFromAll(entityplayer.getBukkitEntity()); // Obamium
+
         ServerLevel worldserver = entityplayer.getLevel();
 
         entityplayer.awardStat(Stats.LEAVE_GAME);
